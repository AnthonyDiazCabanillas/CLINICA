@using Bus.Utilities
@using Ent.Sql
@using Bus.Clinica;
@using RestSharp
@using Web.Clinica.Data
@using System.Net;
@using Web.Clinica.Pages
@inject IJSRuntime js

@code {
    [Parameter]
    public bool acceder { get; set; }
    [Parameter]
    public EventCallback<TarifaClinicaE> oTarifarioSeleccionada { get; set; }
    string _MensajeBody = "";
    string TextoBuscar = "";
    IEnumerable<TarifaClinicaE> ListadoTarifario = new List<TarifaClinicaE>();
    List<TarifaClinicaE> DataResultado = new List<TarifaClinicaE>();

    ApiRutaConexion _app = new ApiRutaConexion();

    [CascadingParameter]
    PageIndexStateProvider State { get; set; }
    int itemsPerPage = 10;
    int totalPages = 1;

    protected override void OnParametersSet()
    {
        if (acceder)
        {
            TextoBuscar = "";
            State = new PageIndexStateProvider();
            ListarTarifario();
        }
        base.OnParametersSet();
    }

    async void ListarTarifario()
    {
        try
        {
            PrestacionBusqE objBuscar = new PrestacionBusqE();
            objBuscar.orden = 2;
            objBuscar.codprestacion = "";
            objBuscar.codtarifa = "";
            objBuscar.busq = TextoBuscar;
            objBuscar.flglimit = 0;


            var encriptado = Criptography.EncryptConectionString(_app.Key);
            var rutaApi = MetaGlobal.RutaApiClinica + "PrestacionesClinica/API/Clinica/Listado_Tarifario";
            var Json = JsonConvert.SerializeObject(objBuscar);

            var _client = new RestClient(rutaApi);
            var _request = new RestRequest();
            _request.Method = Method.Post;
            _request.AddHeader("Authorization", encriptado);
            _request.AddBody(Json);
            var _response = _client.Execute(_request);

            if (_response.StatusCode == HttpStatusCode.OK)
            {
                var resultado = JsonConvert.DeserializeObject<ResultadoTransactionE<TarifaClinicaE>>(_response.Content);
                if (resultado.DataList.Count() > 0)
                {
                    DataResultado = resultado.DataList;
                    decimal _decimal = (decimal)DataResultado.Count() / itemsPerPage;
                    decimal _int = (int)(DataResultado.Count() / itemsPerPage);
                    decimal _tot = _decimal - _int;
                    if (_tot == 0)
                    {
                        totalPages = Convert.ToInt32(_int);
                    }
                    else
                    {
                        totalPages = Convert.ToInt32(_int) + 1;
                    }
                    State.PageIndex = 1;
                    var skipCount = itemsPerPage * (State.PageIndex - 1);
                    ListadoTarifario = DataResultado.Skip(skipCount).Take(itemsPerPage);
                }
                else
                {
                    ListadoTarifario = new List<TarifaClinicaE>();    
                }
            }
            else
            {
                ListadoTarifario = new List<TarifaClinicaE>();
                _MensajeBody = _response.Content.ToString();
                await js.InvokeVoidAsync("NotFoundSpinner", "msgModalErrorTrama");            
            }
        }
        catch (Exception ex)
        {
            _MensajeBody = ex.Message;
            await js.InvokeVoidAsync("NotFoundSpinner", "msgModalTarifarioComponentError");

        }
    }


    void SelectedPage(int SelectedPageIndex)
    {
        State.PageIndex = SelectedPageIndex;
        var skipCount = itemsPerPage * (State.PageIndex - 1);
        ListadoTarifario = DataResultado.Skip(skipCount).Take(itemsPerPage);
    }

    async void OnclickSeleccionar(TarifaClinicaE item)
    {
        await oTarifarioSeleccionada.InvokeAsync(item);
        await js.InvokeVoidAsync("CloseModalMessageName", "idCloseModalBusquedaTarifario");
    }
}

@if (acceder)
{
    <div class="row mt-2">
        <div class="col-md-6">
            Buscar por código o nombre
            <div class="input-group mb-3">
                <input type="text" class="form-control" @bind="TextoBuscar">
                <button class="btn-primary input-group-text" @onclick="ListarTarifario"> <i class="fas fa-search-plus"></i></button>
            </div>
        </div>
    </div>

    <div class="col-md-12 mt-2 table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th class="text-center col-md-1">Cod. Tarifa</th>
                    <th class="text-center col-md-10">Tarifa</th>
                    <th class="text-center col-md-10">Peso</th>
                    <th class="text-center col-md-1">Seleccionar</th>
                </tr>
            </thead>
            @if (ListadoTarifario.Count() > 0)
            {
                <tbody>
                    @foreach (var item in ListadoTarifario)
                    {
                        <tr>
                            <td>@item.codtarifa</td>
                            <td>@item.tarifa</td>
                            <td>@item.peso</td>
                            <td>
                                <button class="btn btn-primary" @onclick="(()=>OnclickSeleccionar(item))"><i class="far fa-hand-pointer"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="3">
                            <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                                        PageIndex="@State.PageIndex"
                                        Radius="3"
                                        OnSelectedPage="@SelectedPage">
                            </Pagination>
                        </td>
                    </tr>
                </tfoot>
            }
        </table>
    </div>


    <MessageModal IdMessage="msgModalTarifarioComponentError"
                  TitleModal="Error"
                  IconMessage=MessageModal.iconMessage.Error
                  TypeButton=MessageModal.typeButton.Ok
                  EscapeKey="true"
                  BodyMessage=@_MensajeBody>
    </MessageModal>
}