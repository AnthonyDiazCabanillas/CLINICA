@page "/ConectaExterno"
@page "/ConectaExterno/{ErrorMessage}"
@page "/ConectaExterno/{ErrorMessage}/{DatoLogin}"
@page "/ConectaExterno/{ErrorMessage}/{DatoLogin}/{Clave}"


@*Se agrega para poder ver los mensajes que validación, que retornan*@
@*@layout MainLogin*@

@*Traer data desde el appsettings.json*@
@using Ent.Sql.ClinicaE;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@*Nos permite desplazarnos por las capas e invocar a la tabla tablas*@
@using Ent.Sql.ClinicaE.UsuariosE
@using Bus.Clinica.Clinica
@inject IJSRuntime js;


@*@inject NavigationManager NavigationManager;*@
@*@using Microsoft.AspNetCore.Http*@
@using System.Text;
@using RestSharp;
@using System.Xml;
@using Web.Clinica.Controllers;
@inject IHttpContextAccessor httpContextAccessor

@inject NavigationManager NavManager



@code {
    [Parameter]
    //[SupplyParameterFromQuery]
    public string ErrorMessage { get; set; } = "";

    [Parameter]
    //[SupplyParameterFromQuery]
    public string DatoLogin { get; set; } = "";


    public string Usuario { get; set; } = "";
    public string Clave { get; set; } = "";
    UsuarioAux oUsuarioAux = new UsuarioAux();


    Controllers.Credenciales credenciales = new Controllers.Credenciales();
    Controllers.LoginController ejecutar = new Controllers.LoginController();
    private readonly Seguridad SeguridadBL = new Seguridad();

    protected override void OnInitialized()
    {
        MostrarBD();
    }
    protected override async Task OnInitializedAsync()
    {
        //nav.NavigateTo("/login", true);
        await base.OnInitializedAsync();
    }


    private async Task pLeeTokenAsync()
    {
        string resultContent = "";
        try
        {
            //string url = "http://192.168.42.155:83/usuario/loginPSF"; // https://localhost:7210/
            //Controllers.UsuarioAux ocredenciales = new Controllers.UsuarioAux();
            //ocredenciales.usuario = "jcaicedo";
            //ocredenciales.clave = "1s23456xzzzzxd";


            //var _Json = JsonConvert.SerializeObject(ocredenciales);
            //var client = new RestClient(url);
            //var request = new RestRequest();
            //request.Method = Method.Post;
            //request.AddHeader("Content-Type", "application/json");
            //request.AddJsonBody(_Json);
            //RestResponse response = client.Execute(request);
            //var JsonGet = JsonConvert.DeserializeObject<RespuestaJsonE>(response.Content);
        }
        catch (Exception ex)
        {
            resultContent = ex.Message;
        }
        //return resultContent;
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //selfReference = DotNetObjectReference.Create(this);
            //var minInterval = 500;

            //await JS.InvokeVoidAsync("onThrottledMouseMove",
            //    mouseMoveElement, selfReference, minInterval);
        }
    }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        try
        {
            //SeguridadBL.Sp_XTMP_Auditor_Insert(NavManager.Uri + " -- NavManager.Uri OnParametersSet(1)");
            var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

            //SeguridadBL.Sp_XTMP_Auditor_Insert(DatoLogin + " -- DatoLogin OnParametersSet(2)");
            string automatico = "";

            if (uri.Segments.Length == 4 && DatoLogin == "")
            {
                DatoLogin = uri.Segments[3];
                automatico = uri.Segments[2];

            }
            //SeguridadBL.Sp_XTMP_Auditor_Insert(DatoLogin + " -- DatoLogin OnParametersSet(3)");

            if (DatoLogin != "" && automatico.Substring(0, 4) == "auto")
            {
                oUsuarioAux = ejecutar.pLeeRutaVerAsync(DatoLogin);
                if (oUsuarioAux.ruta != "")
                {
                    //SeguridadBL.Sp_XTMP_Auditor_Insert(oUsuarioAux.ruta + " -- OnParametersSet(4)" );
                    ejecutar.LoginAsync2(credenciales, httpContextAccessor.HttpContext, oUsuarioAux);
                    NavManager.NavigateTo(oUsuarioAux.ruta);
                }
            }
        }

        catch (Exception ex)
        {
            //SeguridadBL.Sp_XTMP_Auditor_Insert(oUsuarioAux.ruta + " -- OnParametersSet(5)");
            if (oUsuarioAux.ruta != "")
                NavManager.NavigateTo(oUsuarioAux.ruta);
        }
    }



    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender == true)
        {
            var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

            //Logger.LogInformation("OnAfterRender(1): firstRender: " +
            //    "{FirstRender}, message: {Message}", firstRender, message);

            //if (firstRender)
            //{
            //    message = "Executed for the first render.";
            //}
            //else
            //{
            //    message = "Executed after the first render.";
            //}

            //Logger.LogInformation("OnAfterRender(2): firstRender: " +
            //    "{FirstRender}, message: {Message}", firstRender, message);
        }
    }



    private void MostrarBD()
    {
        string CadenaConexion = "";
        string BaseDatosIP = "";
        string BaseDatosConexion = "";
        //Se trae el parametro de la cadena de configuración appsettings.json
        //credenciales.TipoConexion = Configuration.GetValue<string>("WebsiteTitle");
        CadenaConexion = Configuration.GetSection("ConnectionStrings").GetValue<string>("CnnClinica");
        //Aqui se limpia la cadena para consultarla en el servidor
        BaseDatosIP = CadenaConexion.Split(";")[0];
        BaseDatosIP = BaseDatosIP.Substring(12, BaseDatosIP.Length - 12);
        //Aqui hace la consulta de la base de datos
        BaseDatosE oBaseDatosE = new BaseDatosE();
        oBaseDatosE.Nombre = BaseDatosIP;
        //Se hace la invocación de la tabla tablas
        oBaseDatosE = SeguridadBL.GetBaseDatos(oBaseDatosE);
        //Verifica si existe en la tabla tablas
        if (oBaseDatosE != null)
        {
            //Si existe nos muestra el nombre de la base de datos, caso contrario nos mostrara el ip
            if (oBaseDatosE.Descripcion != null)
                BaseDatosConexion = oBaseDatosE.Descripcion;
            else
                BaseDatosConexion = BaseDatosIP;
        }
        credenciales.TipoConexion = BaseDatosConexion;
    }


}

@{


    MetaGlobal.PageTitle = "Iniciar Sesión";
}




<H3>Hola Mundo</H3>
<H3>Hola Mundo</H3>
<H3>Hola Mundo</H3>
<H3>Hola Mundo</H3>
<H3>Hola Mundo</H3>
<H3>Hola Mundo</H3>
<H3>Hola Mundo</H3>
<H3>Hola Mundo</H3>
<H3>Hola Mundo</H3>
<H3>Hola Mundo</H3>

